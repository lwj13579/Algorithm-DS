//Design a data structure that supports the following two operations: addWord(word) and search(word)

search(word) can search a literal word or a regular expression string containing only letters a-z or ..

A . means it can represent any one letter.

class TrieNode{
    TrieNode son[];
    boolean flag;
    public TrieNode(){
        flag = false;
        son = new TrieNode[26];
        for (int i = 0; i < 26; i++){
            son[i] = null;
        }
    }
}
public class WordDictionary {
    TrieNode root;
    
    public WordDictionary(){
        root = new TrieNode();
    }
    
    // Adds a word into the data structure.
    public void addWord(String word) {
        // Write your code here
        TrieNode p = root;
        for (int i = 0; i < word.length(); i++){
            int c = word.charAt(i) - 'a';
            if (p.son[c] == null){
                p.son[c] = new TrieNode();
            }
            p = p.son[c];
        }
        p.flag = true;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        // Write your code here
        // 因为‘。’可以表示任意字符， 考虑.后面可能有任意字符--->需要遍历此。后面的所有char来确定word是否存在---->用recursion
        return find(word, 0, root);
    }
    
    
    
    private  boolean find(String word, int index, TrieNode p) {
        //递归出口
        if(index == word.length()) {
            return p.flag;
        }
        Character c = word.charAt(index);
        if (c == '.') {
            for(int i = 0; i < 26; i++) 
            if (p.son[i] != null) {
                if (find(word, index+1, p.son[i]))
                    return true;
            }
            return false;   // 该节点为null || 最终flag处不匹配
        } else if (p.son[c - 'a'] != null) {
            return find(word, index+1, p.son[c - 'a']);  
        } else {
            return false;
        }
    }
}

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");
